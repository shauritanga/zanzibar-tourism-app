rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own data, admins can read all
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && isAdmin();
      allow write: if request.auth != null && isAdmin();
    }
    
    // Cultural sites - public read, admin write
    match /cultural_sites/{siteId} {
      allow read: if true; // Public read access
      allow write: if request.auth != null && isAdmin();
    }
    
    // Products - public read, authenticated users can create, owners/admins can update
    match /products/{productId} {
      allow read: if true; // Public read access
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        (resource.data.sellerId == request.auth.uid || isAdmin());
    }
    
    // Bookings - users can read/write their own, admins can read all
    match /bookings/{bookingId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow read, write: if request.auth != null && isAdmin();
      allow create: if request.auth != null;
    }
    
    // Educational content - public read, admin write
    match /educational_content/{contentId} {
      allow read: if true; // Public read access
      allow write: if request.auth != null && isAdmin();
    }
    
    // Businesses - public read, authenticated users can create, owners/admins can update
    match /businesses/{businessId} {
      allow read: if true; // Public read access
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        (resource.data.ownerId == request.auth.uid || isAdmin());
    }
    
    // Orders/Transactions - users can read/write their own, admins can read all
    match /orders/{orderId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow read, write: if request.auth != null && isAdmin();
      allow create: if request.auth != null;
    }
    
    // Cart items - users can read/write their own
    match /cart/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      match /items/{itemId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Favorites - users can read/write their own
    match /favorites/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      match /items/{itemId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Reviews - authenticated users can create, owners can update their own
    match /reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Notifications - users can read their own, system can write
    match /notifications/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && isAdmin();
      
      match /items/{notificationId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && isAdmin();
      }
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user owns the resource
    function isOwner(ownerId) {
      return request.auth != null && request.auth.uid == ownerId;
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
  }
}
